# coding: utf-8

from __future__ import absolute_import

from sarna.routes.api import util
from sarna.routes.api.models.base_model_ import Model


class AssessmentBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, platform=None, lang=None, type=None, status=None):  # noqa: E501
        """AssessmentBase - a model defined in OpenAPI

        :param name: The name of this AssessmentBase.  # noqa: E501
        :type name: str
        :param platform: The platform of this AssessmentBase.  # noqa: E501
        :type platform: str
        :param lang: The lang of this AssessmentBase.  # noqa: E501
        :type lang: Language
        :param type: The type of this AssessmentBase.  # noqa: E501
        :type type: AssessmentType
        :param status: The status of this AssessmentBase.  # noqa: E501
        :type status: AssessmentStatus
        """
        from sarna.routes.api.models import Language
        from sarna.routes.api.models import AssessmentType
        from sarna.routes.api.models import AssessmentStatus
        self.openapi_types = {
            'name': str,
            'platform': str,
            'lang': Language,
            'type': AssessmentType,
            'status': AssessmentStatus
        }

        self.attribute_map = {
            'name': 'name',
            'platform': 'platform',
            'lang': 'lang',
            'type': 'type',
            'status': 'status'
        }

        self._name = name
        self._platform = platform
        self._lang = lang
        self._type = type
        self._status = status

    @classmethod
    def from_dict(cls, dikt) -> 'AssessmentBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AssessmentBase of this AssessmentBase.  # noqa: E501
        :rtype: AssessmentBase
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this AssessmentBase.


        :return: The name of this AssessmentBase.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AssessmentBase.


        :param name: The name of this AssessmentBase.
        :type name: str
        """
        if name is not None and len(name) > 64:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")  # noqa: E501

        self._name = name

    @property
    def platform(self):
        """Gets the platform of this AssessmentBase.


        :return: The platform of this AssessmentBase.
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this AssessmentBase.


        :param platform: The platform of this AssessmentBase.
        :type platform: str
        """
        if platform is not None and len(platform) > 64:
            raise ValueError("Invalid value for `platform`, length must be less than or equal to `64`")  # noqa: E501

        self._platform = platform

    @property
    def lang(self):
        """Gets the lang of this AssessmentBase.


        :return: The lang of this AssessmentBase.
        :rtype: Language
        """
        return self._lang

    @lang.setter
    def lang(self, lang):
        """Sets the lang of this AssessmentBase.


        :param lang: The lang of this AssessmentBase.
        :type lang: Language
        """

        self._lang = lang

    @property
    def type(self):
        """Gets the type of this AssessmentBase.


        :return: The type of this AssessmentBase.
        :rtype: AssessmentType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AssessmentBase.


        :param type: The type of this AssessmentBase.
        :type type: AssessmentType
        """

        self._type = type

    @property
    def status(self):
        """Gets the status of this AssessmentBase.


        :return: The status of this AssessmentBase.
        :rtype: AssessmentStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AssessmentBase.


        :param status: The status of this AssessmentBase.
        :type status: AssessmentStatus
        """

        self._status = status

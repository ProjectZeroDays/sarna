# coding: utf-8

from __future__ import absolute_import

from sarna.routes.api import util
from sarna.routes.api.models.base_model_ import Model


class AffectedResource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, route=None, findings=None):  # noqa: E501
        """AffectedResource - a model defined in OpenAPI

        :param route: The route of this AffectedResource.  # noqa: E501
        :type route: str
        :param findings: The findings of this AffectedResource.  # noqa: E501
        :type findings: FindingResume
        """
        from sarna.routes.api.models import FindingResume
        self.openapi_types = {
            'route': str,
            'findings': FindingResume
        }

        self.attribute_map = {
            'route': 'route',
            'findings': 'findings'
        }

        self._route = route
        self._findings = findings

    @classmethod
    def from_dict(cls, dikt) -> 'AffectedResource':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AffectedResource of this AffectedResource.  # noqa: E501
        :rtype: AffectedResource
        """
        return util.deserialize_model(dikt, cls)

    @property
    def route(self):
        """Gets the route of this AffectedResource.


        :return: The route of this AffectedResource.
        :rtype: str
        """
        return self._route

    @route.setter
    def route(self, route):
        """Sets the route of this AffectedResource.


        :param route: The route of this AffectedResource.
        :type route: str
        """
        if route is not None and len(route) > 256:
            raise ValueError("Invalid value for `route`, length must be less than or equal to `256`")  # noqa: E501

        self._route = route

    @property
    def findings(self):
        """Gets the findings of this AffectedResource.


        :return: The findings of this AffectedResource.
        :rtype: FindingResume
        """
        return self._findings

    @findings.setter
    def findings(self, findings):
        """Sets the findings of this AffectedResource.


        :param findings: The findings of this AffectedResource.
        :type findings: FindingResume
        """

        self._findings = findings

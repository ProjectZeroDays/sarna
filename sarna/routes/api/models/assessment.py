# coding: utf-8

from __future__ import absolute_import

from datetime import datetime  # noqa: F401
from typing import List  # noqa: F401

from sarna.routes.api import util
from sarna.routes.api.models.assessment_status import AssessmentStatus
from sarna.routes.api.models.assessment_type import AssessmentType
from sarna.routes.api.models.base_model_ import Model
from sarna.routes.api.models.client import Client
from sarna.routes.api.models.language import Language
from sarna.routes.api.models.user import User


class Assessment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, platform=None, lang=None, type=None, status=None, client=None, creator=None, auditors=None, creation_date=None):  # noqa: E501
        """Assessment - a model defined in OpenAPI

        :param id: The id of this Assessment.  # noqa: E501
        :type id: int
        :param name: The name of this Assessment.  # noqa: E501
        :type name: str
        :param platform: The platform of this Assessment.  # noqa: E501
        :type platform: str
        :param lang: The lang of this Assessment.  # noqa: E501
        :type lang: Language
        :param type: The type of this Assessment.  # noqa: E501
        :type type: AssessmentType
        :param status: The status of this Assessment.  # noqa: E501
        :type status: AssessmentStatus
        :param client: The client of this Assessment.  # noqa: E501
        :type client: Client
        :param creator: The creator of this Assessment.  # noqa: E501
        :type creator: User
        :param auditors: The auditors of this Assessment.  # noqa: E501
        :type auditors: List[User]
        :param creation_date: The creation_date of this Assessment.  # noqa: E501
        :type creation_date: datetime
        """
        self.openapi_types = {
            'id': int,
            'name': str,
            'platform': str,
            'lang': Language,
            'type': AssessmentType,
            'status': AssessmentStatus,
            'client': Client,
            'creator': User,
            'auditors': List[User],
            'creation_date': datetime
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'platform': 'platform',
            'lang': 'lang',
            'type': 'type',
            'status': 'status',
            'client': 'client',
            'creator': 'creator',
            'auditors': 'auditors',
            'creation_date': 'creation_date'
        }

        self._id = id
        self._name = name
        self._platform = platform
        self._lang = lang
        self._type = type
        self._status = status
        self._client = client
        self._creator = creator
        self._auditors = auditors
        self._creation_date = creation_date

    @classmethod
    def from_dict(cls, dikt) -> 'Assessment':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Assessment of this Assessment.  # noqa: E501
        :rtype: Assessment
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Assessment.


        :return: The id of this Assessment.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Assessment.


        :param id: The id of this Assessment.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Assessment.


        :return: The name of this Assessment.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Assessment.


        :param name: The name of this Assessment.
        :type name: str
        """
        if name is not None and len(name) > 64:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")  # noqa: E501

        self._name = name

    @property
    def platform(self):
        """Gets the platform of this Assessment.


        :return: The platform of this Assessment.
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this Assessment.


        :param platform: The platform of this Assessment.
        :type platform: str
        """
        if platform is not None and len(platform) > 64:
            raise ValueError("Invalid value for `platform`, length must be less than or equal to `64`")  # noqa: E501

        self._platform = platform

    @property
    def lang(self):
        """Gets the lang of this Assessment.


        :return: The lang of this Assessment.
        :rtype: Language
        """
        return self._lang

    @lang.setter
    def lang(self, lang):
        """Sets the lang of this Assessment.


        :param lang: The lang of this Assessment.
        :type lang: Language
        """

        self._lang = lang

    @property
    def type(self):
        """Gets the type of this Assessment.


        :return: The type of this Assessment.
        :rtype: AssessmentType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Assessment.


        :param type: The type of this Assessment.
        :type type: AssessmentType
        """

        self._type = type

    @property
    def status(self):
        """Gets the status of this Assessment.


        :return: The status of this Assessment.
        :rtype: AssessmentStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Assessment.


        :param status: The status of this Assessment.
        :type status: AssessmentStatus
        """

        self._status = status

    @property
    def client(self):
        """Gets the client of this Assessment.


        :return: The client of this Assessment.
        :rtype: Client
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this Assessment.


        :param client: The client of this Assessment.
        :type client: Client
        """

        self._client = client

    @property
    def creator(self):
        """Gets the creator of this Assessment.


        :return: The creator of this Assessment.
        :rtype: User
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this Assessment.


        :param creator: The creator of this Assessment.
        :type creator: User
        """

        self._creator = creator

    @property
    def auditors(self):
        """Gets the auditors of this Assessment.


        :return: The auditors of this Assessment.
        :rtype: List[User]
        """
        return self._auditors

    @auditors.setter
    def auditors(self, auditors):
        """Sets the auditors of this Assessment.


        :param auditors: The auditors of this Assessment.
        :type auditors: List[User]
        """

        self._auditors = auditors

    @property
    def creation_date(self):
        """Gets the creation_date of this Assessment.


        :return: The creation_date of this Assessment.
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this Assessment.


        :param creation_date: The creation_date of this Assessment.
        :type creation_date: datetime
        """

        self._creation_date = creation_date

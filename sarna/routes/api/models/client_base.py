# coding: utf-8

from __future__ import absolute_import

from sarna.routes.api import util
from sarna.routes.api.models.base_model_ import Model


class ClientBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, short_name=None, long_name=None):  # noqa: E501
        """ClientBase - a model defined in OpenAPI

        :param short_name: The short_name of this ClientBase.  # noqa: E501
        :type short_name: str
        :param long_name: The long_name of this ClientBase.  # noqa: E501
        :type long_name: str
        """
        self.openapi_types = {
            'short_name': str,
            'long_name': str
        }

        self.attribute_map = {
            'short_name': 'short_name',
            'long_name': 'long_name'
        }

        self._short_name = short_name
        self._long_name = long_name

    @classmethod
    def from_dict(cls, dikt) -> 'ClientBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ClientBase of this ClientBase.  # noqa: E501
        :rtype: ClientBase
        """
        return util.deserialize_model(dikt, cls)

    @property
    def short_name(self):
        """Gets the short_name of this ClientBase.


        :return: The short_name of this ClientBase.
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this ClientBase.


        :param short_name: The short_name of this ClientBase.
        :type short_name: str
        """
        if short_name is None:
            raise ValueError("Invalid value for `short_name`, must not be `None`")  # noqa: E501
        if short_name is not None and len(short_name) > 64:
            raise ValueError("Invalid value for `short_name`, length must be less than or equal to `64`")  # noqa: E501

        self._short_name = short_name

    @property
    def long_name(self):
        """Gets the long_name of this ClientBase.


        :return: The long_name of this ClientBase.
        :rtype: str
        """
        return self._long_name

    @long_name.setter
    def long_name(self, long_name):
        """Sets the long_name of this ClientBase.


        :param long_name: The long_name of this ClientBase.
        :type long_name: str
        """
        if long_name is None:
            raise ValueError("Invalid value for `long_name`, must not be `None`")  # noqa: E501
        if long_name is not None and len(long_name) > 128:
            raise ValueError("Invalid value for `long_name`, length must be less than or equal to `128`")  # noqa: E501

        self._long_name = long_name

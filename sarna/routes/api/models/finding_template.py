# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from sarna.routes.api.models.base_model_ import Model
from sarna.routes.api import util
from sarna.routes.api.models.finding_type import FindingType
from sarna.routes.api.models.owasp_category import OWASPCategory
from sarna.routes.api.models.owasp_mobile_top10_category import OWASPMobileTop10Category
from sarna.routes.api.models.owisam_category import OWISAMCategory
from sarna.routes.api.models.score import Score
from sarna.routes.api.models.user import User


class FindingTemplate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, type=None, owasp_category=None, owasp_mobile_category=None, owisam_category=None, tech_risk=None, business_risk=None, exploitability=None, dissemination=None, solution_complexity=None, creator=None):  # noqa: E501
        """FindingTemplate - a model defined in OpenAPI

        :param id: The id of this FindingTemplate.  # noqa: E501
        :type id: int
        :param name: The name of this FindingTemplate.  # noqa: E501
        :type name: str
        :param type: The type of this FindingTemplate.  # noqa: E501
        :type type: FindingType
        :param owasp_category: The owasp_category of this FindingTemplate.  # noqa: E501
        :type owasp_category: OWASPCategory
        :param owasp_mobile_category: The owasp_mobile_category of this FindingTemplate.  # noqa: E501
        :type owasp_mobile_category: OWASPMobileTop10Category
        :param owisam_category: The owisam_category of this FindingTemplate.  # noqa: E501
        :type owisam_category: OWISAMCategory
        :param tech_risk: The tech_risk of this FindingTemplate.  # noqa: E501
        :type tech_risk: Score
        :param business_risk: The business_risk of this FindingTemplate.  # noqa: E501
        :type business_risk: Score
        :param exploitability: The exploitability of this FindingTemplate.  # noqa: E501
        :type exploitability: Score
        :param dissemination: The dissemination of this FindingTemplate.  # noqa: E501
        :type dissemination: Score
        :param solution_complexity: The solution_complexity of this FindingTemplate.  # noqa: E501
        :type solution_complexity: Score
        :param creator: The creator of this FindingTemplate.  # noqa: E501
        :type creator: User
        """
        self.openapi_types = {
            'id': int,
            'name': str,
            'type': FindingType,
            'owasp_category': OWASPCategory,
            'owasp_mobile_category': OWASPMobileTop10Category,
            'owisam_category': OWISAMCategory,
            'tech_risk': Score,
            'business_risk': Score,
            'exploitability': Score,
            'dissemination': Score,
            'solution_complexity': Score,
            'creator': User
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'type': 'type',
            'owasp_category': 'owasp_category',
            'owasp_mobile_category': 'owasp_mobile_category',
            'owisam_category': 'owisam_category',
            'tech_risk': 'tech_risk',
            'business_risk': 'business_risk',
            'exploitability': 'exploitability',
            'dissemination': 'dissemination',
            'solution_complexity': 'solution_complexity',
            'creator': 'creator'
        }

        self._id = id
        self._name = name
        self._type = type
        self._owasp_category = owasp_category
        self._owasp_mobile_category = owasp_mobile_category
        self._owisam_category = owisam_category
        self._tech_risk = tech_risk
        self._business_risk = business_risk
        self._exploitability = exploitability
        self._dissemination = dissemination
        self._solution_complexity = solution_complexity
        self._creator = creator

    @classmethod
    def from_dict(cls, dikt) -> 'FindingTemplate':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FindingTemplate of this FindingTemplate.  # noqa: E501
        :rtype: FindingTemplate
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this FindingTemplate.


        :return: The id of this FindingTemplate.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FindingTemplate.


        :param id: The id of this FindingTemplate.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this FindingTemplate.


        :return: The name of this FindingTemplate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FindingTemplate.


        :param name: The name of this FindingTemplate.
        :type name: str
        """
        if name is not None and len(name) > 64:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")  # noqa: E501

        self._name = name

    @property
    def type(self):
        """Gets the type of this FindingTemplate.


        :return: The type of this FindingTemplate.
        :rtype: FindingType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FindingTemplate.


        :param type: The type of this FindingTemplate.
        :type type: FindingType
        """

        self._type = type

    @property
    def owasp_category(self):
        """Gets the owasp_category of this FindingTemplate.


        :return: The owasp_category of this FindingTemplate.
        :rtype: OWASPCategory
        """
        return self._owasp_category

    @owasp_category.setter
    def owasp_category(self, owasp_category):
        """Sets the owasp_category of this FindingTemplate.


        :param owasp_category: The owasp_category of this FindingTemplate.
        :type owasp_category: OWASPCategory
        """

        self._owasp_category = owasp_category

    @property
    def owasp_mobile_category(self):
        """Gets the owasp_mobile_category of this FindingTemplate.


        :return: The owasp_mobile_category of this FindingTemplate.
        :rtype: OWASPMobileTop10Category
        """
        return self._owasp_mobile_category

    @owasp_mobile_category.setter
    def owasp_mobile_category(self, owasp_mobile_category):
        """Sets the owasp_mobile_category of this FindingTemplate.


        :param owasp_mobile_category: The owasp_mobile_category of this FindingTemplate.
        :type owasp_mobile_category: OWASPMobileTop10Category
        """

        self._owasp_mobile_category = owasp_mobile_category

    @property
    def owisam_category(self):
        """Gets the owisam_category of this FindingTemplate.


        :return: The owisam_category of this FindingTemplate.
        :rtype: OWISAMCategory
        """
        return self._owisam_category

    @owisam_category.setter
    def owisam_category(self, owisam_category):
        """Sets the owisam_category of this FindingTemplate.


        :param owisam_category: The owisam_category of this FindingTemplate.
        :type owisam_category: OWISAMCategory
        """

        self._owisam_category = owisam_category

    @property
    def tech_risk(self):
        """Gets the tech_risk of this FindingTemplate.


        :return: The tech_risk of this FindingTemplate.
        :rtype: Score
        """
        return self._tech_risk

    @tech_risk.setter
    def tech_risk(self, tech_risk):
        """Sets the tech_risk of this FindingTemplate.


        :param tech_risk: The tech_risk of this FindingTemplate.
        :type tech_risk: Score
        """

        self._tech_risk = tech_risk

    @property
    def business_risk(self):
        """Gets the business_risk of this FindingTemplate.


        :return: The business_risk of this FindingTemplate.
        :rtype: Score
        """
        return self._business_risk

    @business_risk.setter
    def business_risk(self, business_risk):
        """Sets the business_risk of this FindingTemplate.


        :param business_risk: The business_risk of this FindingTemplate.
        :type business_risk: Score
        """

        self._business_risk = business_risk

    @property
    def exploitability(self):
        """Gets the exploitability of this FindingTemplate.


        :return: The exploitability of this FindingTemplate.
        :rtype: Score
        """
        return self._exploitability

    @exploitability.setter
    def exploitability(self, exploitability):
        """Sets the exploitability of this FindingTemplate.


        :param exploitability: The exploitability of this FindingTemplate.
        :type exploitability: Score
        """

        self._exploitability = exploitability

    @property
    def dissemination(self):
        """Gets the dissemination of this FindingTemplate.


        :return: The dissemination of this FindingTemplate.
        :rtype: Score
        """
        return self._dissemination

    @dissemination.setter
    def dissemination(self, dissemination):
        """Sets the dissemination of this FindingTemplate.


        :param dissemination: The dissemination of this FindingTemplate.
        :type dissemination: Score
        """

        self._dissemination = dissemination

    @property
    def solution_complexity(self):
        """Gets the solution_complexity of this FindingTemplate.


        :return: The solution_complexity of this FindingTemplate.
        :rtype: Score
        """
        return self._solution_complexity

    @solution_complexity.setter
    def solution_complexity(self, solution_complexity):
        """Sets the solution_complexity of this FindingTemplate.


        :param solution_complexity: The solution_complexity of this FindingTemplate.
        :type solution_complexity: Score
        """

        self._solution_complexity = solution_complexity

    @property
    def creator(self):
        """Gets the creator of this FindingTemplate.


        :return: The creator of this FindingTemplate.
        :rtype: User
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this FindingTemplate.


        :param creator: The creator of this FindingTemplate.
        :type creator: User
        """

        self._creator = creator

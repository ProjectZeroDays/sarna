# coding: utf-8

from __future__ import absolute_import

from typing import List  # noqa: F401

from sarna.routes.api import util
from sarna.routes.api.models.base_model_ import Model


class PaginatedEnvelop(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, total=None, page_size=None, page=None, error=None, data=None):  # noqa: E501
        """PaginatedEnvelop - a model defined in OpenAPI

        :param total: The total of this PaginatedEnvelop.  # noqa: E501
        :type total: int
        :param page_size: The page_size of this PaginatedEnvelop.  # noqa: E501
        :type page_size: int
        :param page: The page of this PaginatedEnvelop.  # noqa: E501
        :type page: int
        :param error: The error of this PaginatedEnvelop.  # noqa: E501
        :type error: Error
        :param data: The data of this PaginatedEnvelop.  # noqa: E501
        :type data: List[object]
        """
        from sarna.routes.api.models import Error
        self.openapi_types = {
            'total': int,
            'page_size': int,
            'page': int,
            'error': Error,
            'data': List[object]
        }

        self.attribute_map = {
            'total': 'total',
            'page_size': 'page_size',
            'page': 'page',
            'error': 'error',
            'data': 'data'
        }

        self._total = total
        self._page_size = page_size
        self._page = page
        self._error = error
        self._data = data

    @classmethod
    def from_dict(cls, dikt) -> 'PaginatedEnvelop':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PaginatedEnvelop of this PaginatedEnvelop.  # noqa: E501
        :rtype: PaginatedEnvelop
        """
        return util.deserialize_model(dikt, cls)

    @property
    def total(self):
        """Gets the total of this PaginatedEnvelop.

        Number of items  # noqa: E501

        :return: The total of this PaginatedEnvelop.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this PaginatedEnvelop.

        Number of items  # noqa: E501

        :param total: The total of this PaginatedEnvelop.
        :type total: int
        """

        self._total = total

    @property
    def page_size(self):
        """Gets the page_size of this PaginatedEnvelop.

        number of items per page  # noqa: E501

        :return: The page_size of this PaginatedEnvelop.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this PaginatedEnvelop.

        number of items per page  # noqa: E501

        :param page_size: The page_size of this PaginatedEnvelop.
        :type page_size: int
        """

        self._page_size = page_size

    @property
    def page(self):
        """Gets the page of this PaginatedEnvelop.

        Current page number  # noqa: E501

        :return: The page of this PaginatedEnvelop.
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this PaginatedEnvelop.

        Current page number  # noqa: E501

        :param page: The page of this PaginatedEnvelop.
        :type page: int
        """

        self._page = page

    @property
    def error(self):
        """Gets the error of this PaginatedEnvelop.


        :return: The error of this PaginatedEnvelop.
        :rtype: Error
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this PaginatedEnvelop.


        :param error: The error of this PaginatedEnvelop.
        :type error: Error
        """

        self._error = error

    @property
    def data(self):
        """Gets the data of this PaginatedEnvelop.


        :return: The data of this PaginatedEnvelop.
        :rtype: List[object]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this PaginatedEnvelop.


        :param data: The data of this PaginatedEnvelop.
        :type data: List[object]
        """

        self._data = data

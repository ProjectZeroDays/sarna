swagger: "2.0"
info:
  description: "API of SARNA (https://github.com/rsrdesarrollo/sarna/)"
  version: "1.0.0"
  title: "SARNA API"
  contact:
    email: "rsrdesarrollo@gmail.com"
  license:
    name: "GPLv3"
    url: "https://www.gnu.org/licenses/gpl.txt"
host: "example.com"
basePath: "/api/v1"
schemes:
- "https"

tags:
- name: client
  description: "Everything about your clients"
- name: finding
  description: "Access Finding database"
- name: assessment
  description: "Operate with assessments"
- name: user
  description: "System Users"

consumes:
- "application/json"
produces:
- "application/json"

securityDefinitions:
  api_key:
    type: apiKey
    name: "Api-Key"
    in: header

security:
- api_key: []

parameters:
  page_size:
    name: page_size
    in: query
    description: Number of items returned
    type: integer
    format: int32
    minimum: 0
    exclusiveMinimum: true
    maximum: 100
    exclusiveMaximum: false
    multipleOf: 10
    default: 10
  page:
    name: page
    in: query
    description: Number of page
    type: integer
    format: int32
    minimum: 0
    exclusiveMinimum: false
    default: 0

paths:
  /client:
    post:
      tags:
        - client
      summary: "Create a new client"
      operationId: createClient
      parameters:
        - in: body
          name: client
          description: The client to create.
          schema:
            $ref: '#/definitions/Client'
      responses:
        403:
          $ref: '#/responses/Forbidden'
        201:
          description: "Client data"
          schema:
            allOf:
            - $ref: '#/definitions/Envelop'
            - type: object
              property:
                data:
                  $ref: '#/definitions/Client'
    get:
      tags:
      - client
      summary: "Get a list of clients"
      operationId: getClients
      parameters:
      - in: query
        $ref: '#/parameters/page'
      - in: query
        $ref: '#/parameters/page_size'
      responses:
        200:
          description: "List of clients"
          schema:
            allOf:
            - $ref: '#/definitions/PaginatedEnvelop'
            - type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/definitions/Client'
  /client/{client_id}:
    patch:
      tags:
      - client
      summary: "Modify client"
      operationId: modifyClient
      parameters:
      - name: client_id
        in: path
        description: Client ID
        required: true
        type: integer
        format: int64
      - in: body
        name: client
        description: The client to create.
        schema:
          $ref: '#/definitions/Client'
      responses:
        404:
          $ref: '#/responses/NotFound'
        403:
          $ref: '#/responses/Forbidden'
        204:
          $ref: '#/responses/NoContent'
    get:
      tags:
      - client
      summary: Get client data
      operationId: getClient
      parameters:
      - name: client_id
        in: path
        description: Client ID
        required: true
        type: integer
        format: int64
      responses:
        404:
          $ref: '#/responses/NotFound'
        403:
          $ref: '#/responses/Forbidden'
        200:
          description: "Client data"
          schema:
            allOf:
            - $ref: '#/definitions/Envelop'
            - type: object
              property:
                data:
                  $ref: '#/definitions/Client'
  /client/{client_id}/assessment:
    post:
      tags:
      - client
      summary: "Create a new assessment for client"
      operationId: createAssessment
      parameters:
      - name: client_id
        in: path
        description: Client ID
        required: true
        type: integer
        format: int64
      - in: body
        name: client
        description: The assessment to create.
        schema:
          $ref: '#/definitions/Assessment'
      responses:
        404:
          $ref: '#/responses/NotFound'
        403:
          $ref: '#/responses/Forbidden'
        201:
          description: "Client Assessment data"
          schema:
            allOf:
            - $ref: '#/definitions/Envelop'
            - type: object
              properties:
                data:
                  $ref: '#/definitions/Assessment'
    get:
      tags:
        - client
      summary: Get list of assessment of the client
      operationId: getClientAssessments
      parameters:
      - in: path
        name: client_id
        description: Client ID
        required: true
        type: integer
        format: int64
      - in: query
        $ref: '#/parameters/page'
      - in: query
        $ref: '#/parameters/page_size'
      responses:
        404:
          $ref: '#/responses/NotFound'
        403:
          $ref: '#/responses/Forbidden'
        200:
          description: "Client Assessments data"
          schema:
            allOf:
            - $ref: '#/definitions/PaginatedEnvelop'
            - type: object
              properties:
                data:
                  items:
                    $ref: '#/definitions/Assessment'
  /client/{client_id}/template:
    get:
      tags:
        - client
      summary: Get list of assessment of the client
      operationId: getClientTemplates
      parameters:
      - in: path
        name: client_id
        description: Client ID
        required: true
        type: integer
        format: int64
      - in: query
        $ref: '#/parameters/page'
      - in: query
        $ref: '#/parameters/page_size'
      responses:
        404:
          $ref: '#/responses/NotFound'
        403:
          $ref: '#/responses/Forbidden'
        200:
          description: "Client Assessments data"
          schema:
            allOf:
            - $ref: '#/definitions/PaginatedEnvelop'
            - type: object
              properties:
                data:
                  items:
                    $ref: '#/definitions/Template'
  /client/{client_id}/template/{template_id}:

  /assessment:
    get:
      tags:
      - assessment
      summary: "Get a list of assessments"
      operationId: getAssessments
      parameters:
      - in: query
        $ref: '#/parameters/page'
      - in: query
        $ref: '#/parameters/page_size'
      responses:
        200:
          description: "List of assessments"
          schema:
            allOf:
            - $ref: '#/definitions/PaginatedEnvelop'
            - type: object
              properties:
                data:
                  items:
                    $ref: '#/definitions/Assessment'
  /assessment/{assessment_id}:
    get:
      tags:
      - assessment
      summary: Get assessment data
      operationId: getAssessment
      parameters:
      - name: assessment_id
        in: path
        description: Assessment ID
        required: true
        type: integer
        format: int64
      responses:
        404:
          $ref: '#/responses/NotFound'
        403:
          $ref: '#/responses/Forbidden'
        200:
          description: "Assessment data"
          schema:
            allOf:
            - $ref: '#/definitions/Envelop'
            - type: object
              property:
                data:
                  $ref: '#/definitions/Assessment'
  /assessment/{assessment_id}/findig:
    get:
      tags:
      - assessment
      summary: "Get a list of findings in assessment"
      operationId: getAssessmentFindingis
      parameters:
      - name: assessment_id
        in: path
        description: Assessment ID
        required: true
        type: integer
        format: int64
      - in: query
        $ref: '#/parameters/page'
      - in: query
        $ref: '#/parameters/page_size'
      responses:
        200:
          description: "List of Findings"
          schema:
            allOf:
            - $ref: '#/definitions/PaginatedEnvelop'
            - type: object
              properties:
                data:
                  items:
                    $ref: '#/definitions/Finding'
  /assessment/{assessment_id}/findig/{finding_id}:
  /assessment/{assessment_id}/image:
  /assessment/{assessment_id}/image/{image_id}:
  /assessment/{assessment_id}/asset:
  /assessment/{assessment_id}/asset/{asset_id}:
  /assessment/{assessment_id}/asset/{asset_id}/resource:
  /findign:
    get:
      tags:
      - finding
      summary: "Get a list of finding templates"
      operationId: getFindignTemplates
      parameters:
      - in: query
        $ref: '#/parameters/page'
      - in: query
        $ref: '#/parameters/page_size'
      responses:
        200:
          description: "List of Finding Templates"
          schema:
            allOf:
            - $ref: '#/definitions/PaginatedEnvelop'
            - type: object
              properties:
                data:
                  items:
                    $ref: '#/definitions/FindingTemplate'
  /finding/{finding_id}:
  /finding/{finding_id}/solution:
  /finding/{finding_id}/translation:
  /user:
    get:
      tags:
      - user
      summary: "Get a list of Users"
      operationId: getUsers
      parameters:
      - in: query
        $ref: '#/parameters/page'
      - in: query
        $ref: '#/parameters/page_size'
      responses:
        200:
          description: "List of Users"
          schema:
            allOf:
            - $ref: '#/definitions/PaginatedEnvelop'
            - type: object
              properties:
                data:
                  items:
                    $ref: '#/definitions/User'
  /user/{user_id}:
responses:
  NotFound:
    description: The specified resource was not found
    schema:
      $ref: '#/definitions/Envelop'
  Forbidden:
    description: Forbidden
    schema:
      $ref: '#/definitions/Envelop'
  NoContent:
    description: No Content
definitions:
  Envelop:
    type: object
    properties:
      data:
        type: object
      error:
        $ref: '#/definitions/Error'
  PaginatedEnvelop:
    type: object
    properties:
      total:
        type: integer
        description: "Number of items"
        example: 3212
      page_size:
        type: integer
        description: "number of items per page"
        example: 10
      page:
        type: integer
        description: "Current page number"
        example: 0
      error:
        $ref: '#/definitions/Error'
      data:
        type: array
        items:
          type: object
  Error:
    type: object
    properties:
      code:
        type: string
      message:
        type: string
    required:
    - code
    - message
  ## ENUMS
  ########
  UserType:
    type: string
    example: "manager"
    enum: [manager, auditor, trusted_auditor, admin]
  AssessmentType:
    type: string
    example: "Web"
    enum: [Web]
  AssessmentStatus:
    type: string
    example: "Open"
    enum: [Open]
  FindingType:
    type: string
    example: "Web"
    enum: [Web, Infra, Mobile, WiFi]
  FindingStatus:
    type: string
    example: "Pending"
    enum: [Pending]
  Language:
    type: string
    example: Spanish
    enum: [Spanish, English]
  Score:
    type: string
    example: Low
    enum: [Info, Low, Medium, High, Critical, NA]
  OWASPMobileTop10Category:
    type: string
    example: "M1"
    enum: [M1]
  OWISAMCategory:
    type: string
    example: "DI-001"
    enum: ["DI-001"]
  OWASPCategory:
    type: string
    example: 'OTG-INFO-001'
    enum: ['OTG-INFO-001']

  ## FINDING TEMPLATES
  ####################
  FindingTemplate:
    type: object
    properties:
      id:
        type: integer
        example: 1
      name:
        type: string
        example: "xss-vulne-stored"
        maxLength: 64
      type:
        $ref: '#/definitions/FindingType'
      owasp_category:
        $ref: '#/definitions/OWASPCategory'
      owasp_mobile_category:
        $ref: '#/definitions/OWASPMobileTop10Category'
      owisam_category:
        $ref: '#/definitions/OWISAMCategory'
      tech_risk:
        $ref: '#/definitions/Score'
      business_risk:
        $ref: '#/definitions/Score'
      exploitability:
        $ref: '#/definitions/Score'
      dissemination:
        $ref: '#/definitions/Score'
      solution_complexity:
        $ref: '#/definitions/Score'
      creator:
        $ref: '#/definitions/User'
  Finding:
    type: object
  Active:
    type: object
  Images:
    type: object


  ## CLIENTS
  ##########
  Client:
    type: object
    required:
      - short_name
      - long_name
    properties:
      short_name:
        type: string
        example: "ACME"
        maxLength: 64
      long_name:
        type: string
        example: "ACME Global Corp Inc."
        maxLength: 128
      creator:
        $ref: '#/definitions/User'
      managers:
        type: array
        items:
          $ref: '#/definitions/User'
  Template:
    type: object
    properties:
      name:
        type: string
        example: "MY TEMPLATE"
        maxLength: 25
      description:
        type: string
        example: "This is the template description"
        maxLength: 128

  ## ASSESSMENT
  #############

  Assessment:
    type: object
    properties:
      id:
        type: integer
        example: 1
      name:
        type: string
        example: "assessment-1"
        maxLength: 64
      platform:
        type: string
        example: "example.com"
        maxLength: 64
      lang:
        $ref: '#/definitions/Language'
      type:
        $ref: '#/definitions/AssessmentType'
      status:
        $ref: '#/definitions/AssessmentStatus'
      client:
        $ref: '#/definitions/Client'
      creator:
        $ref: '#/definitions/User'
      auditors:
        type: array
        items:
          $ref: '#/definitions/User'
      creation_date:
        type: string
        format: date-time

  ## USERS
  ########
  UserName:
    type: string
    example: "username"
    maxLength: 128
  User:
    type: object
    properties:
      username:
        $ref: '#/definitions/UserName'
      user_type:
        $ref: '#/definitions/UserType'
    required:
      - username

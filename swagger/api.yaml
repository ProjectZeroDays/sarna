openapi: 3.0.0
info:
  title: "SARNA API"
  version: "1.0.0"
  description: "API of SARNA (https://github.com/rsrdesarrollo/sarna/)"
  contact:
    email: "rsrdesarrollo@gmail.com"
  license:
    name: "GPLv3"
    url: "https://www.gnu.org/licenses/gpl.txt"
servers:
- url: http://localhost:5000/api/v1
  description: Development Server

tags:
- name: client
  description: "Everything about your clients"
- name: finding
  description: "Access Finding database"
- name: assessment
  description: "Operate with assessments"
- name: user
  description: "System Users"

security:
- bearerAuth: []

paths:
  /client:
    post:
      tags:
      - client
      summary: "Create a new client"
      operationId: createClient
      requestBody:
        description: The client to create.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Client'
      responses:
        403:
          $ref: '#/components/responses/Forbidden'
        201:
          description: "Client data"
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelop'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/Client'
    get:
      tags:
      - client
      summary: "Get a list of clients"
      operationId: getClients
      parameters:
      - in: query
        $ref: '#/components/parameters/page'
      - in: query
        $ref: '#/components/parameters/page_size'
      responses:
        200:
          description: "List of clients"
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/PaginatedEnvelop'
                - type: object
                  properties:
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/Client'
  /client/{client_id}:
    patch:
      tags:
      - client
      summary: "Modify client"
      operationId: modifyClient
      parameters:
      - $ref: '#/components/parameters/client_id'
      requestBody:
        description: The client to create.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Client'
      responses:
        404:
          $ref: '#/components/responses/NotFound'
        403:
          $ref: '#/components/responses/Forbidden'
        204:
          $ref: '#/components/responses/NoContent'
    get:
      tags:
      - client
      summary: Get client data
      operationId: getClient
      parameters:
      - $ref: '#/components/parameters/client_id'
      responses:
        404:
          $ref: '#/components/responses/NotFound'
        403:
          $ref: '#/components/responses/Forbidden'
        200:
          description: "Client data"
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelop'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/Client'
  /client/{client_id}/assessment:
    post:
      tags:
      - client
      summary: "Create a new assessment for client"
      operationId: createAssessment
      parameters:
      - $ref: '#/components/parameters/client_id'

      requestBody:
        description: The assessment to create.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Assessment'
      responses:
        404:
          $ref: '#/components/responses/NotFound'
        403:
          $ref: '#/components/responses/Forbidden'
        201:
          description: "Client Assessment data"
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelop'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/Assessment'
    get:
      tags:
      - client
      summary: Get list of assessment of the client
      operationId: getClientAssessments
      parameters:
      - $ref: '#/components/parameters/client_id'
      - $ref: '#/components/parameters/page'
      - $ref: '#/components/parameters/page_size'
      responses:
        404:
          $ref: '#/components/responses/NotFound'
        403:
          $ref: '#/components/responses/Forbidden'
        200:
          description: "Client Assessments data"
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/PaginatedEnvelop'
                - type: object
                  properties:
                    data:
                      items:
                        $ref: '#/components/schemas/Assessment'
  /client/{client_id}/template:
    get:
      tags:
      - client
      summary: Get list of assessment of the client
      operationId: getClientTemplates
      parameters:
      - $ref: '#/components/parameters/client_id'
      - $ref: '#/components/parameters/page'
      - $ref: '#/components/parameters/page_size'
      responses:
        404:
          $ref: '#/components/responses/NotFound'
        403:
          $ref: '#/components/responses/Forbidden'
        200:
          description: "Client Assessments data"
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/PaginatedEnvelop'
                - type: object
                  properties:
                    data:
                      items:
                        $ref: '#/components/schemas/Template'
  /client/{client_id}/template/{template_id}:
    description: handle client templates
  /assessment:
    get:
      tags:
      - assessment
      summary: "Get a list of assessments"
      operationId: getAssessments
      parameters:
      - in: query
        $ref: '#/components/parameters/page'
      - in: query
        $ref: '#/components/parameters/page_size'
      responses:
        200:
          description: "List of assessments"
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/PaginatedEnvelop'
                - type: object
                  properties:
                    data:
                      items:
                        $ref: '#/components/schemas/Assessment'
  /assessment/{assessment_id}:
    get:
      tags:
      - assessment
      summary: Get assessment data
      operationId: getAssessment
      parameters:
      - $ref: '#/components/parameters/assessment_id'
      responses:
        404:
          $ref: '#/components/responses/NotFound'
        403:
          $ref: '#/components/responses/Forbidden'
        200:
          description: "Assessment data"
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/Envelop'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/Assessment'
  /assessment/{assessment_id}/findig:
    get:
      tags:
      - assessment
      summary: "Get a list of findings in assessment"
      operationId: getAssessmentFindingis
      parameters:
      - $ref: '#/components/parameters/assessment_id'
      - $ref: '#/components/parameters/page'
      - $ref: '#/components/parameters/page_size'
      responses:
        200:
          description: "List of Findings"
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/PaginatedEnvelop'
                - type: object
                  properties:
                    data:
                      items:
                        $ref: '#/components/schemas/Finding'
  /assessment/{assessment_id}/findig/{finding_id}:
    description: handle assessment findings
  /assessment/{assessment_id}/image:
    description: TBD
  /assessment/{assessment_id}/image/{image_id}:
    description: TBD
  /assessment/{assessment_id}/asset:
    description: TBD
  /assessment/{assessment_id}/asset/{asset_id}:
    description: TBD
  /assessment/{assessment_id}/asset/{asset_id}/resource:
    description: TBD
  /findign:
    get:
      tags:
      - finding
      summary: "Get a list of finding templates"
      operationId: getFindignTemplates
      parameters:
      - in: query
        $ref: '#/components/parameters/page'
      - in: query
        $ref: '#/components/parameters/page_size'
      responses:
        200:
          description: "List of Finding Templates"
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/PaginatedEnvelop'
                - type: object
                  properties:
                    data:
                      items:
                        $ref: '#/components/schemas/FindingTemplate'
  /finding/{finding_id}:
    description: TBD
  /finding/{finding_id}/solution:
    description: TBD
  /finding/{finding_id}/translation:
    description: TBD
  /user:
    get:
      tags:
      - user
      summary: "Get a list of Users"
      operationId: getUsers
      parameters:
      - in: query
        $ref: '#/components/parameters/page'
      - in: query
        $ref: '#/components/parameters/page_size'
      responses:
        200:
          description: "List of Users"
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/PaginatedEnvelop'
                - type: object
                  properties:
                    data:
                      items:
                        $ref: '#/components/schemas/User'
  /user/{user_id}:
    description: TBD

components:
  parameters:
    user_id:
      name: user_id
      in: path
      description: User ID
      required: true
      schema:
        type: string
    finding_id:
      name: finding_id
      in: path
      description: Finding ID
      required: true
      schema:
        type: integer
    assessment_id:
      name: assessment_id
      in: path
      description: Assessment ID
      required: true
      schema:
        type: integer
    client_id:
      name: client_id
      in: path
      description: Client ID
      required: true
      schema:
        type: integer
    page_size:
      name: page_size
      in: query
      description: Number of items returned
      schema:
        type: integer
        minimum: 10
        maximum: 100
        multipleOf: 10
        default: 10
    page:
      name: page
      in: query
      description: Number of page
      schema:
        type: integer
        minimum: 0
        default: 0

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      x-bearerInfoFunc: sarna.core.auth.bearer_token_info

  responses:
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Envelop'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Envelop'
    NoContent:
      description: No Content
  schemas:
    Envelop:
      type: object
      properties:
        data:
          type: object
        error:
          $ref: '#/components/schemas/Error'
    PaginatedEnvelop:
      type: object
      properties:
        total:
          type: integer
          description: "Number of items"
          example: 3212
        page_size:
          type: integer
          description: "number of items per page"
          example: 10
        page:
          type: integer
          description: "Current page number"
          example: 0
        error:
          $ref: '#/components/schemas/Error'
        data:
          type: array
          items:
            type: object
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
      - code
      - message
    ## ENUMS
    ########
    UserType:
      type: string
      example: "manager"
      enum: [manager, auditor, trusted_auditor, admin]
    AssessmentType:
      type: string
      example: "Web"
      enum: [Web]
    AssessmentStatus:
      type: string
      example: "Open"
      enum: [Open]
    FindingType:
      type: string
      example: "Web"
      enum: [Web, Infra, Mobile, WiFi]
    FindingStatus:
      type: string
      example: "Pending"
      enum: [Pending]
    Language:
      type: string
      example: Spanish
      enum: [Spanish, English]
    Score:
      type: string
      example: Low
      enum: [Info, Low, Medium, High, Critical, NA]
    OWASPMobileTop10Category:
      type: string
      example: "M1"
      enum: [M1]
    OWISAMCategory:
      type: string
      example: "DI-001"
      enum: ["DI-001"]
    OWASPCategory:
      type: string
      example: 'OTG-INFO-001'
      enum: ['OTG-INFO-001']

    ## FINDING TEMPLATES
    ####################
    FindingTemplate:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "xss-vulne-stored"
          maxLength: 64
        type:
          $ref: '#/components/schemas/FindingType'
        owasp_category:
          $ref: '#/components/schemas/OWASPCategory'
        owasp_mobile_category:
          $ref: '#/components/schemas/OWASPMobileTop10Category'
        owisam_category:
          $ref: '#/components/schemas/OWISAMCategory'
        tech_risk:
          $ref: '#/components/schemas/Score'
        business_risk:
          $ref: '#/components/schemas/Score'
        exploitability:
          $ref: '#/components/schemas/Score'
        dissemination:
          $ref: '#/components/schemas/Score'
        solution_complexity:
          $ref: '#/components/schemas/Score'
        creator:
          $ref: '#/components/schemas/User'
    Finding:
      type: object
    Active:
      type: object
    Images:
      type: object


    ## CLIENTS
    ##########
    Client:
      type: object
      required:
      - short_name
      - long_name
      properties:
        short_name:
          type: string
          example: "ACME"
          maxLength: 64
        long_name:
          type: string
          example: "ACME Global Corp Inc."
          maxLength: 128
        creator:
          $ref: '#/components/schemas/User'
        managers:
          type: array
          items:
            $ref: '#/components/schemas/User'
    Template:
      type: object
      properties:
        name:
          type: string
          example: "MY TEMPLATE"
          maxLength: 25
        description:
          type: string
          example: "This is the template description"
          maxLength: 128

    ## ASSESSMENT
    #############

    Assessment:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "assessment-1"
          maxLength: 64
        platform:
          type: string
          example: "example.com"
          maxLength: 64
        lang:
          $ref: '#/components/schemas/Language'
        type:
          $ref: '#/components/schemas/AssessmentType'
        status:
          $ref: '#/components/schemas/AssessmentStatus'
        client:
          $ref: '#/components/schemas/Client'
        creator:
          $ref: '#/components/schemas/User'
        auditors:
          type: array
          items:
            $ref: '#/components/schemas/User'
        creation_date:
          type: string
          format: date-time

    ## USERS
    ########
    UserName:
      type: string
      example: "username"
      maxLength: 128
    User:
      type: object
      properties:
        username:
          $ref: '#/components/schemas/UserName'
        user_type:
          $ref: '#/components/schemas/UserType'
      required:
      - username
